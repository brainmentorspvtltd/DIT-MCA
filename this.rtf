{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs72 \cf0 If\'85else\
loops\
pattern\
String\
memory layout\
class and object\
constructor\
this keyword\'97>this refers to the current class\
super keyword \'97> super refers to the parent class\
init block\
static block\
Inheritance\
\
this\'97> refers to the current class\
\
this()\'97>calls the current class default constructor\
this(10)\'97>calls the current class paraterized constructor\
this.x\'97> calls the current class instance variable\
\
\
\
super\'97>refers to the parent class\
\
super()\'97>calls the parent class default constructor\
super(10)\'97>calls the parent class parametrized constructor\
super.x\'97> calls the parent class instance variable\
\
\
\
\
\
\
\
variable\
method\
\
this\'97> refers to the current class\
\
this.x\'97>calls the current class instance variable\
\
this()\'97>calls the current class constructor\
\
this(100,300)\'97>calls the current class parametrized constructor\
\
super\'97> refers to the parent class\
\
super.x\'97>calls the parent class instance variable\
\
super()\'97>call the parent class default constructor\
\
super(10)\'97>call the parent class parametrized constructor\
\
*********************************************************************\
\
\
\
\
this\'97> refers to current class\
\
this.x\'97> calls current class instance variable\
\
this()\'97>calls current class constructor\
\
\
super\'97> refers to parent class\
\
super.x\'97>calls parent class instance variable\
\
super()\'97>calls parent class constructor\
\
\
Method\'97>need to call by object\
variable\'97>need to call by object\
\
static block\'97>at the time of class loading called automatically\
init block\'97>before constructor calling\
constructor\'97>whenever object is created\
\
\
class Parent\
\{\
 int x;\
\
static\
\{\
//parent\
\}\
\
\{\
//parent init\
\}\
void show()\
\{\
\
\}\
\}\
\
\
class Child extends parent\
\{\
\
\{\
//child init\
\}\
static\
\{\
//child\
\}\
void display()\
\{\
\
\}\
\}\
\
Child c=new Child();\
//c.show();\
c.x;\
\
\
\
static\'97>keyword\
\
static\'97> variable\'97>all the objects share the same copy if there is a change in one object     it will reflect in another object.\
\
               method\'97>static method can call by its class name. It contains only static variable. Non static variable can\'92t be declare inside it.\
               \
            block\'97>static block call at the time of class loading\
\
static\
\{\
\
\}\
\
\
\
\
final\'97> variable\'97>it can\'92t be change. declare to be as constant\
\
final int a=10;\'97> now its fix \
\
a++; //error\
\
              method\'97> it can\'92t be overriding\
              class\'97> it can\'92t be inherited\
\
final variable\'97>stop changing\
final method\'97>stop overriding\
final class\'97>stop inherit\
\
\
\
Abstract\'97>\
\
abstract method\'97>method don\'92t have any body\
\
Abstract Class\'97>\
\
1. May or May not have abstract methods.\
\
2. It can\'92t be instantiated. (we can\'92t create an object of abstract class bcoz its not a fully define class)\
\
3. A subclass / child class define all the methods of abstract parent class \
\
\
Interface\'97> Java does not support multiple inheritance bcoz it creates an ambiguity (confusion) but with the help of interfaces we can achieve this\
\
- we can\'92t use multiple inheritance in java so java provides a alternative mechanism known as interfaces\
\
- Interfaces contains only abstract methods and final variable . It means that interfaces do not specify any code to implements.\
\
\
Point to remember\'97>\
\
1. Methods\'97> By default methods are \'93public\'94 and abstract \
\
2. variables\'97> By default \'93public\'94,final and static\
\
3. When class inherits an interface so it uses implements keyword instead of extends\
\
4. When two interfaces inherit each other it uses extends keyword \
\
interface A\
\{\
\
\}\
\
interface B\
\{\
\
\}\
\
interface C extends A,B\
\{\
\
\}\
 or\
\
class C implements A,B\
\{\
\
\}\
\
\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \

\fs48 a) abstract class A \{ \
\'a0 \'a0 void m1();\
\'a0 \}\
\
\
b) abstract class A \{ \
\'a0 \'a0 abstract void m1();\
\'a0 \}\
\
\
c) abstract public class A \{ \
\'a0 \'a0abstract void m1();\
\'a0 \}\
\
d) abstract public class A \{ \
\'a0 \'a0 void m1() ;\
\'a0 \}\
\
e) abstract class A \{\
\'a0 \'a0abstract void m1(); \
\'a0 \'a0void m2();\
\'a0 \'a0\}\
f)  abstract class A \{\
\'a0 \'a0 final int x = 100; \
\'a0 \'a0 abstract void m1();\
\'a0 \'a0 abstract void m2();\
\'a0 \'a0\}\
\
g) abstract class A \{ \
\'a0 \'a0abstract void m1();\
\'a0 \}\
\'a0  public class Test  \{\
\'a0 public static void main(String[] args) \{\
\'a0 \'a0A a = new A();// can\'92t be instantiated\
\'a0 \'a0\}\
\'a0 \}\
h)  abstract class A \{ \
\'a0 \'a0abstract void m1();\
\'a0 \
\'a0 \'a0static void m2() \{System.out.println("Hello Java!"); \}\
\'a0 \'a0\}\
\'a0 \'a0 class B extends A \{\
\'a0 \'a0 void m1()\{\
\'a0 \'a0 \'a0 \'a0A.m2(); \
\'a0 \'a0 \}\
\'a0 \'a0\}\
\
i) abstract class A \{ \
\'a0 \'a0abstract void m1();\
\'a0\
\'a0 \}\
\'a0class B extends A \{ \}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf2 \uc0\u8232 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs72 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}